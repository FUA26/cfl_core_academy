// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  password    String?
  hashToken   String?
  isVerified  Boolean     @default(false)
  role        Role        @default(USER)
  phoneNumber String?
  status      Int         @default(1)
  courses     String?
  questions   Questions[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Course {
  id             String       @id @default(uuid())
  name           String
  description    String
  categories     String
  price          Int
  estimatedPrice Int?
  thumbnail      String
  tags           String
  level          String
  demoUrl        String
  benefits       String
  prerequisites  String
  reviews        Review[]
  courseData     CourseData[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
}

model Review {
  id        Int       @id @default(autoincrement())
  userId    String
  rating    Int       @default(0)
  review    String
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CourseData {
  id             String      @id @default(uuid())
  title          String
  description    String
  videoUrl       String
  videoThumbnail String
  videoSection   String
  videoLength    Int
  videoPlayer    String
  links          String
  courseId       String
  course         Course      @relation(fields: [courseId], references: [id])
  questions      Questions[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime?   @updatedAt
}

model Questions {
  id               Int         @id @default(autoincrement())
  userId           String
  question         String
  questionReplies  Questions[] @relation("QuestionReplies")
  parentQuestionId Int? // Nullable foreign key for the self-reference
  parentQuestion   Questions?  @relation("QuestionReplies", fields: [parentQuestionId], references: [id])
  courseDataId     String
  courseData       CourseData  @relation(fields: [courseDataId], references: [id])
  User             User        @relation(fields: [userId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
}

enum Role {
  ADMIN
  USER
}
